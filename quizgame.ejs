<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quick Quiz-Play</title>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');

body{
    color:#dddddd;
}
* {
    font-size: 65%;
}

.choice-container{
    display:flex;
    margin-bottom: 2rem;
    width:100%;
    border-radius: 6px;
    background: #a2dbdb;
    font-size: 3rem;
    min-width: 80rem;
    font-family: 'Montserrat', sans-serif;
}

.choice-container:hover{
    cursor: pointer;
    box-shadow: 0 0.4rem 1.4rem 0 rgba(6, 103,247,0.5);
    transform: scale(1.02);
    transform: transform 100ms;
}

.choice-prefix{
    padding: 2rem ;
    color: #333456;
    font-size: medium;
    font-weight: bolder;
}

.choice-text{
    padding: 2rem;
    width: 100%;
    color: #0e0101; 
}

.correct{
    background: rgb(144, 235, 54);  
}

.incorrect{
    background: rgb(214, 27, 64);
}

#hud{
    display: flex;
    justify-content: space-between;
}

.hud-prefix{
    text-align: center;
    font-size: 2rem;
}

.hub-main-text{
    text-align: center;
}

#progressBar{
    width: 20rem;
    height: 3rem;
    border: 0.2rem solid rgb(144, 235, 54);
    margin-top: 1rem;
    margin-bottom: 3rem;
    border-radius: 50px;
    overflow: hidden;
}

#progressBarFull{
    height: 100%;
    background: rgb(144, 235, 54);
    width: 0;
}

@media screen and (max-width: 768px){
    .choice-container{
        min-width: 50rem;
    }
}
    @import url('https://fonts.googleapis.com/css2?family=Goldman:wght@700&family=Redressed&display=swap');

:root{
    background-color: #222831;
}

*{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

h1{
    font-family: 'Redressed', cursive;
    font-size: 4.8rem;
    color:#dddddd;
    margin-bottom: 3rem;
}

h2{
    font-size: 4.2rem;
    margin-bottom: 4rem;
}

.container{
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 2rem;
    margin: 0 auto;
    padding: 2rem;
}

.flex-column{
    display: flex;
    flex-direction: column;
}

.flex-center{
    justify-content: center;
    align-items: center;
}

justify-center{
    justify-content: center;
}

.text-center{
    text-align: center;
}

.hidden{
    display: none;
}

.btn{
    font-size: 2.4rem;
    color: #11698e;
    padding: 2rem 0;
    width: 18rem;
    text-align: center;
    font-family: 'Goldman', cursive;
    background: rgb(11, 233, 122);
    border-radius: 8px;
}

.btn:hover{
    cursor: pointer;
    box-shadow: 0 0.4rem 1.4rem 0 rgba(8,114,244,0.6);
    transition: transform 150ms;
    transform: scale(1.03);
}
    .nav {
      height: 50px;
      width: 100%;
      background-color: #4d4d4d;
      position: relative;
      font-size: x-large!important;
    }

    .nav-links {
      margin-left: auto; 
    }

    .nav-title {
      margin-right: auto; 
    }

    .nav > .nav-header {
      display: inline;
    }

    .nav > .nav-header > .nav-title {
      display: inline-block;
      font-size: 22px;
      color: #fff;
      padding: 10px 10px 10px 10px;
    }

    .nav > .nav-btn {
      display: none;
    }

    .nav > .nav-links {
      display: inline;
      float: right;
      font-size: 18px;
    }

    .nav > .nav-links > a {
      display: inline-block;
      padding: 13px 10px 13px 10px;
      text-decoration: none;
      color: #efefef;
      font-size: unset;
    }

    .nav > .nav-links > a:hover {
      background-color: rgba(0, 0, 0, 0.3);
    }

    .nav > #nav-check {
      display: none;
    }

    @media (max-width:1050px) {
      .nav > .nav-btn {
        display: inline-block;
        position: absolute;
        right: 0px;
        top: 0px;
      }
      .nav > .nav-btn > label {
        display: inline-block;
        width: 50px;
        height: 50px;
        padding: 13px;
      }
      .nav > .nav-btn > label:hover,.nav  #nav-check:checked ~ .nav-btn > label {
        background-color: rgba(0, 0, 0, 0.3);
      }
      .nav > .nav-btn > label > span {
        display: block;
        width: 25px;
        height: 10px;
        border-top: 2px solid #eee;
      }
      .nav > .nav-links {
        position: absolute;
        display: block;
        width: 100%;
        background-color: #333;
        height: 0px;
        transition: all 0.3s ease-in;
        overflow-y: hidden;
        top: 50px;
        left: 0px;
      }
      .nav > .nav-links > a {
        display: block;
        width: 100%;
      }
      .nav > #nav-check:not(:checked) ~ .nav-links {
        height: 0px;
      }
      .nav > #nav-check:checked ~ .nav-links {
        height: calc(100vh - 50px);
        overflow-y: auto;
      }
    }

  </style>
</head>
<body>
  <div class="nav">
    <input type="checkbox" id="nav-check">
    <div class="nav-header">
      <div class="nav-title">
        Quiz
      </div>
    </div>
    <div class="nav-btn">
      <label for="nav-check">
        <span></span>
        <span></span>
        <span></span>
      </label>
    </div>
    
    <div class="nav-links">
      <a href="/" ><b>HOME</b></a>
      <a href="/aboutus" ><b>ABOUT US</b></a>
      <a href="/dictionary" ><b>DICTIONARY</b></a>
      <a href="/quizindex" ><b>QUIZ</b></a>
      <a href="/trans" ><b>TRANSLATOR</b></a>
      <a href="/pronun" ><b>PRONUNCIATION</b></a>
    </div>
  </div>
  <div class="container">
   <div id="game" class="justify-center fle-column">
     <div id="hud">
       <div class="hud-item">
         <p id="progressText" class="hud-prefix">
           Questions
         </p>
         <div id="progressBar">
           <div id="progressBarFull"></div>
         </div>
       </div>
       <div class="hud-item">
         <p class="hud-prefix">
           Score
         </p>
         <h1 class="hud-main-text" id="score">
           0
         </h1>
       </div>   
     </div>
     <h1 id="question"> Answer this question. </h1>
     <div class="choice-container">
      <p class="choice-prefix">A</p>
      <p class="choice-text" data-number="1">Choice 1</p>
    </div> 
    <div class="choice-container">
      <p class="choice-prefix">B</p>
      <p class="choice-text" data-number="2">Choice 2</p>
    </div>
    <div class="choice-container">
      <p class="choice-prefix">C</p>
      <p class="choice-text" data-number="3">Choice 3</p>
    </div>
    <div class="choice-container">
      <p class="choice-prefix">D</p>
      <p class="choice-text" data-number="4">Choice 4</p>
    </div> 
  </div> 
</div>
<script src="./dictionary.json"></script>
<script>
  const question = document.querySelector('#question');
const choices = Array.from(document.querySelectorAll('.choice-text'));
const progressText = document.querySelector('#progressText');
const scoreText = document.querySelector('#score');
const progressBarFull = document.querySelector('#progressBarFull');

let currentQuestion = {}
let acceptingAnswers = true
let score = 0
let questionCounter = 0
let availableQuestions = []
let arr=[];
for(let i=0;i<15;i++)
{
    arr[i]=Math.floor((Math.random() * 100) + 1);
}
const data=dictionary;
console.log(arr);
let questions = [
    {
        question: 'Meaning of Sanskrit word - '+data[Object.keys(data)[arr[0]]].meanings[0].def,
        choice1: ' '+Object.keys(data)[arr[0]+Math.floor((Math.random() * 10) + 1)],
        choice2: ' '+Object.keys(data)[arr[0]],
        choice3: ' '+Object.keys(data)[arr[0]+Math.floor((Math.random() * 20) + 1)],
        choice4: ' '+Object.keys(data)[arr[0]+Math.floor((Math.random() * 30) + 1)],
        answer: 2
    },
    {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[1]],
        choice1: ' '+data[Object.keys(data)[arr[1]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[1]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[1]]].meanings[0].def,
        choice4: ' '+data[Object.keys(data)[arr[1]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 3
    },
    {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[3]],
        choice1: ' '+data[Object.keys(data)[arr[3]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[3]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[3]]].meanings[0].def,
        choice4: ' '+data[Object.keys(data)[arr[3]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 3
    },
    {
        question: 'Meaning of Sanskrit word - '+data[Object.keys(data)[arr[2]]].meanings[0].def,
        choice2: ' '+Object.keys(data)[arr[2]+Math.floor((Math.random() * 10) + 1)],
        choice1: ' '+Object.keys(data)[arr[2]],
        choice3: ' '+Object.keys(data)[arr[2]+Math.floor((Math.random() * 20) + 1)],
        choice4: ' '+Object.keys(data)[arr[2]+Math.floor((Math.random() * 30) + 1)],
        answer: 1
     },
     {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[4]],
        choice1: ' '+data[Object.keys(data)[arr[4]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[4]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice4: ' '+data[Object.keys(data)[arr[4]]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[4]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 4
    },
    {
        question: 'Meaning of Sanskrit word - '+data[Object.keys(data)[arr[5]]].meanings[0].def,
        choice1: ' '+Object.keys(data)[arr[5]+Math.floor((Math.random() * 10) + 1)],
        choice2: ' '+Object.keys(data)[arr[5]],
        choice3: ' '+Object.keys(data)[arr[5]+Math.floor((Math.random() * 20) + 1)],
        choice4: ' '+Object.keys(data)[arr[5]+Math.floor((Math.random() * 30) + 1)],
        answer: 2
     },
     {
        question: 'Meaning of Sanskrit word - '+data[Object.keys(data)[arr[6]]].meanings[0].def,
        choice2: ' '+Object.keys(data)[arr[6]+Math.floor((Math.random() * 10) + 1)],
        choice3: ' '+Object.keys(data)[arr[6]],
        choice1: ' '+Object.keys(data)[arr[6]+Math.floor((Math.random() * 20) + 1)],
        choice4: ' '+Object.keys(data)[arr[6]+Math.floor((Math.random() * 30) + 1)],
        answer: 3
     },
     {
        question: 'Meaning of Sanskrit word - '+data[Object.keys(data)[arr[7]]].meanings[0].def,
        choice2: ' '+Object.keys(data)[arr[7]+Math.floor((Math.random() * 10) + 1)],
        choice1: ' '+Object.keys(data)[arr[7]],
        choice3: ' '+Object.keys(data)[arr[7]+Math.floor((Math.random() * 20) + 1)],
        choice4: ' '+Object.keys(data)[arr[7]+Math.floor((Math.random() * 30) + 1)],
        answer: 1
     },
     {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[8]],
        choice1: ' '+data[Object.keys(data)[arr[8]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[8]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice4: ' '+data[Object.keys(data)[arr[8]]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[8]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 4
    },
    {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[9]],
        choice1: ' '+data[Object.keys(data)[arr[9]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[9]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice4: ' '+data[Object.keys(data)[arr[9]]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[9]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 4
    },
    {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[10]],
        choice4: ' '+data[Object.keys(data)[arr[10]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[10]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice1: ' '+data[Object.keys(data)[arr[10]]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[10]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 1
    },
    {
        question: 'Meaning of Sanskrit word - '+data[Object.keys(data)[arr[11]]].meanings[0].def,
        choice1: ' '+Object.keys(data)[arr[11]+Math.floor((Math.random() * 10) + 1)],
        choice2: ' '+Object.keys(data)[arr[11]],
        choice3: ' '+Object.keys(data)[arr[11]+Math.floor((Math.random() * 20) + 1)],
        choice4: ' '+Object.keys(data)[arr[11]+Math.floor((Math.random() * 30) + 1)],
        answer: 2
     },
     {
        question: 'Meaning of Sanskrit word - '+data[Object.keys(data)[arr[12]]].meanings[0].def,
        choice1: ' '+Object.keys(data)[arr[12]+Math.floor((Math.random() * 10) + 1)],
        choice2: ' '+Object.keys(data)[arr[12]],
        choice3: ' '+Object.keys(data)[arr[12]+Math.floor((Math.random() * 20) + 1)],
        choice4: ' '+Object.keys(data)[arr[12]+Math.floor((Math.random() * 30) + 1)],
        answer: 2
     },
     {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[13]],
        choice4: ' '+data[Object.keys(data)[arr[13]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[13]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice1: ' '+data[Object.keys(data)[arr[13]]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[13]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 1
    },
    {
        question: 'The Sanskrit word of this English text - '+Object.keys(data)[arr[14]],
        choice4: ' '+data[Object.keys(data)[arr[14]+Math.floor((Math.random() * 10) + 1)]].meanings[0].def,
        choice2: ' '+data[Object.keys(data)[arr[14]+Math.floor((Math.random() * 20) + 1)]].meanings[0].def,
        choice3: ' '+data[Object.keys(data)[arr[14]]].meanings[0].def,
        choice1: ' '+data[Object.keys(data)[arr[14]+Math.floor((Math.random() * 30) + 1)]].meanings[0].def,
        answer: 3
    }
]

const SCORE_POINTS = 100
const MAX_QUESTIONS = 10

startGame = () => {
    questionCounter = 0
    score = 0
    availableQuestions = [...questions]
    getNewQuestion()
}

getNewQuestion = () => {
    if(availableQuestions.length === 0 || questionCounter >= MAX_QUESTIONS) {
        localStorage.setItem('mostRecentScore', score)

        return window.location.assign('/quizend')
    }

    questionCounter++
    progressText.innerText = `Question ${questionCounter} of ${MAX_QUESTIONS}`
    progressBarFull.style.width = `${(questionCounter/MAX_QUESTIONS) * 100}%`
    
    const questionsIndex = Math.floor(Math.random() * availableQuestions.length)
    currentQuestion = availableQuestions[questionsIndex]
    question.innerText = currentQuestion.question

    choices.forEach(choice => {
        const number = choice.dataset['number']
        choice.innerText = currentQuestion['choice' + number]
    })

    availableQuestions.splice(questionsIndex, 1)

    acceptingAnswers = true
}

choices.forEach(choice => {
    choice.addEventListener('click', e => {
        if(!acceptingAnswers) return

        acceptingAnswers = false
        const selectedChoice = e.target
        const selectedAnswer = selectedChoice.dataset['number']

        let classToApply = selectedAnswer == currentQuestion.answer ? 'correct' : 'incorrect'

        if(classToApply === 'correct') {
            incrementScore(SCORE_POINTS)
        }

        selectedChoice.parentElement.classList.add(classToApply)

        setTimeout(() => {
            selectedChoice.parentElement.classList.remove(classToApply)
            getNewQuestion()

        }, 1000)
    })
})

incrementScore = num => {
    score +=num
    scoreText.innerText = score
}

startGame()
</script>
</body>
</html>
